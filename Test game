#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <assert.h>

int main (int argc, char* args[])
{
    /* INICIALIZAÇÃO */
    SDL_Init(SDL_INIT_EVERYTHING);
    IMG_Init(0);
    SDL_Window* win = SDL_CreateWindow("Game v0.1",
                         SDL_WINDOWPOS_UNDEFINED,
                         SDL_WINDOWPOS_UNDEFINED,
                         0, 0,
                         SDL_WINDOW_FULLSCREEN_DESKTOP);
    SDL_Renderer* ren = SDL_CreateRenderer(win, -1, 0);
    SDL_Texture* img = IMG_LoadTexture(ren, "parado.png");
    assert(img != NULL);

	SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE);
	SDL_EventState(SDL_MOUSEBUTTONDOWN, SDL_IGNORE);
	SDL_EventState(SDL_MOUSEBUTTONUP, SDL_IGNORE);

    int largura, altura;
    SDL_GetWindowSize(win, &largura, &altura);

    /* EXECUÇÃO */
    SDL_Rect player = { largura/5, altura - 150, 50, 55 };

    SDL_Rect terra = { 0, altura-50, largura, 50 };
    SDL_Rect grama = { 0, altura-100, largura, 50 };

    SDL_Rect n1 = { largura/5,  altura/8,   100,50 };
    SDL_Rect n2 = { largura/3,  altura/12,  100,50 };
    SDL_Rect n3 = { largura/2,  altura/6,   100,50 };
    SDL_Rect n4 = { 2*largura/3,altura/8,   100,50 };
    SDL_Rect n5 = { 5*largura/6,altura/12,  100,50 };

    SDL_Rect sol = { -100, altura/8, 100,100 };
    SDL_Rect lua = { -100, altura/8, 100,100 };

    SDL_Event evt;
    int espera = 16;

    int vely = 0;
    int gravidade = 1;
    int puloInicial = -18;
    int noChao = 1;

    int numPlataformas = 2;
    SDL_Rect plataformas[2] = {
        { 200, altura-200, 150,20 },
	{ 400, altura-300, 150,20 }
	};

while (!SDL_QuitRequested()) {

    // --- RENDERIZAÇÃO ---
    SDL_SetRenderDrawColor(ren, 0xbb,0xf3,0xf9,0x00);
    SDL_RenderClear(ren);

    SDL_SetRenderDrawColor(ren, 0xd0,0x9d,0x6a,0x00);
    SDL_RenderFillRect(ren, &terra);

    SDL_SetRenderDrawColor(ren, 0x05,0xee,0x07,0x00);
    SDL_RenderFillRect(ren, &grama);

    SDL_SetRenderDrawColor(ren, 0x80,0x80,0x80,0x00);
    for (int i=0; i<numPlataformas; i++) {
        SDL_RenderFillRect(ren, &plataformas[i]);
    }

    SDL_SetRenderDrawColor(ren, 0xf3,0xf0,0x63,0x00);
    SDL_RenderFillRect(ren, &sol);

    SDL_SetRenderDrawColor(ren, 0xff,0xff,0xff,0x00);
    SDL_RenderFillRect(ren, &n1);
    SDL_RenderFillRect(ren, &n2);
    SDL_RenderFillRect(ren, &n3);
    SDL_RenderFillRect(ren, &n4);
    SDL_RenderFillRect(ren, &n5);

    SDL_RenderCopy(ren, img, NULL, &player);

    SDL_RenderPresent(ren);

    // --- MOVIMENTO DE NUVENS E SOL ---
    n1.x += 2; n2.x += 2; n3.x += 2; n4.x += 2; n5.x += 2; sol.x += 1;
    if (n1.x >= largura) n1.x = -50;
    if (n2.x >= largura) n2.x = -50;
    if (n3.x >= largura) n3.x = -50;
    if (n4.x >= largura) n4.x = -50;
    if (n5.x >= largura) n5.x = -50;
    if (sol.x >= largura) sol.x = -100;

    // EVENTOS
    SDL_Event evt;
    int isevt = SDL_WaitEventTimeout(&evt, espera);
    if (isevt && evt.type == SDL_QUIT) {
        break;
    }

    // TECLADO
    const Uint8 *keys = SDL_GetKeyboardState(NULL);

    // Pulo (só se estiver no chão ou numa plataforma)
    if (keys[SDL_SCANCODE_Z] && noChao) {
        vely = puloInicial;
        noChao = 0;
    }

    // Movimento lateral
    if (keys[SDL_SCANCODE_LEFT]) {
        player.x -= 10;
    }
    if (keys[SDL_SCANCODE_RIGHT]) {
        player.x += 10;
    }

    // GRAVIDADE
    player.y += vely;
    vely += gravidade;
    noChao = 0; // assume que está no ar até confirmar

    // COLISÃO COM O CHÃO
    int chao = altura - 150;
    if (player.y >= chao) {
        player.y = chao;
        vely = 0;
        noChao = 1;
    }

    // COLISÃO COM PLATAFORMAS (POR CIMA)
    for (int i=0; i<numPlataformas; i++) {
        SDL_Rect plat = plataformas[i];
        if (vely >= 0 &&
            player.y + player.h > plat.y &&
            player.y + player.h - vely <= plat.y &&
            player.x + player.w > plat.x &&
            player.x < plat.x + plat.w) 
        {
            player.y = plat.y - player.h;
            vely = 0;
            noChao = 1;
        }
    }

    // COLISÃO POR BAIXO (BATEU CABEÇA)
    for (int i=0; i<numPlataformas; i++) {
        SDL_Rect plat = plataformas[i];
        if (vely < 0 &&
            player.y <= plat.y + plat.h &&
            player.y - vely >= plat.y + plat.h &&
            player.x + player.w > plat.x &&
            player.x < plat.x + plat.w) 
        {
            player.y = plat.y + plat.h;
            vely = 0;
        }
    }
}
    SDL_DestroyTexture(img);
    SDL_DestroyRenderer(ren);
    SDL_DestroyWindow(win);
    SDL_Quit();
}
